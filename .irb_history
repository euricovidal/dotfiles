@eventual_requirement.errors
eventual_requirement_auth
new_auth
new_auth.valid?
new_auth.errors
EventualRequirement.find(41)
EventualRequirement.find(41).eventual_requirement_auth
EventualRequirement.find(41).eventual_requirement_type.type_of_form_requirement.code
EventualRequirement.find(33).eventual_requirement_auth
EventualRequirement.find(33).eventual_requirement_auth.dup
EventualRequirement.find(41).delete
EventualRequirement.find(33).renovada
Configuration
::Configuration
::Configuration.language
Rails.cache
last_response
response
reponse.body
response.body
EventualRequirement.find(45).updare renovada: false
EventualRequirement.find(45).update renovada: false
EventualRequirement.find(45).update data_do_encerramento: Date.today
EventualRequirement.find(33)
EventualRequirement.find(33).update renovada: false
Venture.find(2)
Venture.find(2).venture.execution_type
Venture.find(2).venture_execution_type
ReportLicense.all
ReportLicense.pluck(:venture_execution_type)
Venture.last.venture_execution_type
Venture.last
@eventual_requirement
EventualRequirement.find(45).status_code
EventualRequirement.find(45).status
EventualRequirement.find(45)
user
user.errors
User.last
User.last.update password: 'xxxxxx', password_confirmation: 'xxxxxx'
User.last.password
exitexit
params
user.authenticate(params[:password])
self.assigment
assignment
assignment.moderator
subject
exit!
attrs
name
c.language=1
c
c.language=2
123.to_bn
c.aa?

c.language
c.aaaa
c.language?
c.aaa
c.aaa?
c.config
reload!
c.language='pt-BR'
c.update_all
c.all
c=Configuration.new
SocialMetrixComment
Rack.env
ENV['RACK_ENV']
Application.config.env
SocialMetrixComment.first
SocialMetrixComment.total_by_sentiment
s.first
s.first.sentiment
s.first.total
s=SocialMetrixComment.total_by_sentiment
SocialMetrixCampaignOpinion.by_brand('Pepsi').pluck(:campaign).map{|campaign| {value: campaign, label: campaign} }
SocialMetrixCampaignOpinion.by_brand('Pepsi').map{|campaign| {value: campaign.campaign, label: campaign.campaign} }
SocialMetrixCampaignOpinion.by_brand('Pepsi')
SocialMetrixCampaignOpinion.by_brand('Pepsi').pluck(:campaign)
[].nil?
YoutubeChannel.first
YoutubeChannel.first.retrieve_videos
YoutubeChannel.first.capture_metrics
YoutubeVidel
YoutubeVideo
YoutubeVideo.last
YoutubeVideo.count(campaign: nil)
YoutubeVideo.first(campaign: nil)
YoutubeVideo.first_by(campaign: nil)
[].to_a
{}.to_a
Array{a: 1})
Array.new({a: 1})
Array({a: 1})
{a: 1}
{a: 1}.to_a
exit
ls
puts "a"
Paint['Ruby', :italic, :encircle, :rapid_blink, :overline]
puts Paint['Ruby', :italic, :encircle, :rapid_blink, :overline]
x=%w{lazanha pizza escondidinho}
x.rand
x.shuffle
Random.new(x)
rand x
x.shuffle.first
%w{lazanha pizza escondidinho}.suffle.first
(%w{lazanha pizza escondidinho}).suffle.first
(%w{lazanha pizza escondidinho}).shuffle.first
"a"
"a".methods
"a".methods.to_s
1
1 + 2
a
YoutubeComment
YoutubeComments
YoutubeProfile
YoutubeProfile.new
YoutubeProfile.all
s=YoutubeMetric.metric_profiles_by_comments
s=YoutubeMetric.all
s=YoutubeMetric.all.limit(2000
)
r=YoutubeViewsFilter.new(s)
r=YoutubeViewsFilter.new(s, {})
r=YoutubeViewsFilter.new(s, {}).result
p={filter_regions:16, filter_regions:18, region16:16, region18:18, filter_period:MONTH, filter_date_from:'10-15-2014', filter_date_to:'11-11-2014', filter_previous_date_from:'09-17-2014', filter_previous_date_to:'10-14-2014', filter_level_owned:'FACEBOOK', filter_level_owned:'TWITTER', filter_level_owned:'YOUTUBE', filter_level_owned='INSTAGRAM'}
p={filter_regions:16, filter_regions:18, region16:16, region18:18, filter_period:MONTH, filter_date_from:'10-15-2014', filter_date_to:'11-11-2014', filter_previous_date_from:'09-17-2014', filter_previous_date_to:'10-14-2014', filter_level_owned:'FACEBOOK', filter_level_owned:'TWITTER', filter_level_owned:'YOUTUBE', filter_level_owned:'INSTAGRAM'}
p={filter_regions:16, filter_regions:18, region16:16, region18:18, filter_period:'MONTH', filter_date_from:'10-15-2014', filter_date_to:'11-11-2014', filter_previous_date_from:'09-17-2014', filter_previous_date_to:'10-14-2014', filter_level_owned:'FACEBOOK', filter_level_owned:'TWITTER', filter_level_owned:'YOUTUBE', filter_level_owned:'INSTAGRAM'}
r=YoutubeViewsFilter.new(s, p).result
p={filter_regions:16, filter_regions:18, region16:16, region18:18, filter_period:'MONTH', filter_date_from:'10-15-2014', filter_date_to:'11-11-2014', filter_previous_date_from:'09-17-2014', filter_previous_date_to:'10-14-2014', filter_level_owned:['FACEBOOK', 'TWITTER', 'YOUTUBE', 'INSTAGRAM']}
